-- ========================================
-- CORRECTION FINALE : STRUCTURE R√âELLE CONFIRM√âE
-- La vue mv_stores_with_templates a une colonne 'id' (pas 'store_id')
-- ========================================

-- 1. CR√âER UN INDEX UNIQUE SUR LA COLONNE 'id' (qui existe vraiment)
CREATE UNIQUE INDEX IF NOT EXISTS 
idx_mv_stores_with_templates_id_unique 
ON mv_stores_with_templates (id);

-- 2. FONCTION DU TRIGGER CORRIG√âE
CREATE OR REPLACE FUNCTION trigger_refresh_stores_view_safe()
RETURNS TRIGGER AS $$
BEGIN
    BEGIN
        -- Essayer le rafra√Æchissement concurrent d'abord
        REFRESH MATERIALIZED VIEW CONCURRENTLY mv_stores_with_templates;
        RAISE NOTICE '‚úÖ Vue mat√©rialis√©e rafra√Æchie avec succ√®s (concurrent)';
    EXCEPTION
        WHEN OTHERS THEN
            -- Si le rafra√Æchissement concurrent √©choue, utiliser le rafra√Æchissement normal
            RAISE WARNING '‚ö†Ô∏è Rafra√Æchissement concurrent √©chou√©: %. Tentative rafra√Æchissement normal...', SQLERRM;
            BEGIN
                REFRESH MATERIALIZED VIEW mv_stores_with_templates;
                RAISE NOTICE '‚úÖ Vue mat√©rialis√©e rafra√Æchie avec succ√®s (normal)';
            EXCEPTION
                WHEN OTHERS THEN
                    -- Si m√™me le rafra√Æchissement normal √©choue, juste logger l'erreur
                    RAISE WARNING '‚ùå √âchec du rafra√Æchissement de la vue mat√©rialis√©e: %', SQLERRM;
            END;
    END;
    
    RETURN NULL; -- Pour un trigger AFTER STATEMENT
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. SUPPRIMER L'ANCIEN TRIGGER PROBL√âMATIQUE
DROP TRIGGER IF EXISTS trigger_site_templates_refresh ON site_templates;

-- 4. CR√âER LE NOUVEAU TRIGGER CORRIG√â
CREATE TRIGGER trigger_site_templates_refresh_safe
    AFTER INSERT OR DELETE OR UPDATE ON site_templates 
    FOR EACH STATEMENT
    EXECUTE FUNCTION trigger_refresh_stores_view_safe();

-- 5. V√âRIFIER QUE LE TRIGGER EST BIEN CR√â√â
SELECT 
    'Trigger Status' as check_type,
    trigger_name,
    event_manipulation,
    action_timing,
    action_statement
FROM information_schema.triggers 
WHERE event_object_table = 'site_templates'
AND trigger_name LIKE '%refresh%';

-- 6. TESTER LA MISE √Ä JOUR
DO $$
DECLARE
    test_template_id UUID;
    initial_updated_at TIMESTAMP WITH TIME ZONE;
    new_updated_at TIMESTAMP WITH TIME ZONE;
BEGIN
    -- Trouver un template existant pour le test
    SELECT id, updated_at INTO test_template_id, initial_updated_at
    FROM site_templates 
    LIMIT 1;
    
    IF test_template_id IS NOT NULL THEN
        RAISE NOTICE 'üîç Test de mise √† jour du template %...', test_template_id;
        
        -- Tenter la mise √† jour
        UPDATE site_templates 
        SET 
            updated_at = NOW(),
            is_published = NOT is_published -- Changer l'√©tat pour un vrai update
        WHERE id = test_template_id;
        
        -- V√©rifier si la mise √† jour a r√©ussi
        SELECT updated_at INTO new_updated_at FROM site_templates WHERE id = test_template_id;
        
        IF new_updated_at > initial_updated_at THEN
            RAISE NOTICE '‚úÖ UPDATE SUCCESS: Le template % a √©t√© mis √† jour avec succ√®s!', test_template_id;
        ELSE
            RAISE NOTICE '‚ùå UPDATE FAILED: Le template % n''a pas √©t√© mis √† jour.', test_template_id;
        END IF;
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Aucun template trouv√© pour le test.';
    END IF;
END $$;

-- 7. R√âSULTAT FINAL
SELECT 
    '‚úÖ CORRECTION TERMIN√âE' as status,
    'Le trigger a √©t√© corrig√© selon la vraie structure de la vue mat√©rialis√©e' as result;
