/**
 * üîç Script de diagnostic pour les probl√®mes d'authentification
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase (utilise les variables d'environnement)
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function diagnoseAuthIssue() {
  console.log('üîç Diagnostic des probl√®mes d\'authentification...');
  
  try {
    // 1. Tester la connexion Supabase
    console.log('\n1. Test de connexion Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå Erreur de connexion Supabase:', testError);
      return;
    }
    console.log('‚úÖ Connexion Supabase OK');
    
    // 2. Tester la r√©cup√©ration des profils
    console.log('\n2. Test de r√©cup√©ration des profils...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(5);
    
    if (profilesError) {
      console.error('‚ùå Erreur r√©cup√©ration profils:', profilesError);
    } else {
      console.log('‚úÖ Profils r√©cup√©r√©s:', profiles?.length || 0);
    }
    
    // 3. Tester la r√©cup√©ration des boutiques
    console.log('\n3. Test de r√©cup√©ration des boutiques...');
    const { data: stores, error: storesError } = await supabase
      .from('stores')
      .select('*')
      .limit(5);
    
    if (storesError) {
      console.error('‚ùå Erreur r√©cup√©ration boutiques:', storesError);
    } else {
      console.log('‚úÖ Boutiques r√©cup√©r√©es:', stores?.length || 0);
    }
    
    // 4. Tester la cr√©ation d'un profil (simulation)
    console.log('\n4. Test de cr√©ation de profil...');
    const testUserId = 'test-user-' + Date.now();
    const { data: newProfile, error: createError } = await supabase
      .from('profiles')
      .insert({
        user_id: testUserId,
        first_name: 'Test',
        last_name: 'User',
        email: 'test@example.com'
      })
      .select()
      .single();
    
    if (createError) {
      console.error('‚ùå Erreur cr√©ation profil:', createError);
    } else {
      console.log('‚úÖ Profil cr√©√©:', newProfile.id);
      
      // Nettoyer le profil de test
      await supabase
        .from('profiles')
        .delete()
        .eq('id', newProfile.id);
      console.log('üßπ Profil de test supprim√©');
    }
    
    console.log('\n‚úÖ Diagnostic termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
}

// Ex√©cuter le diagnostic
diagnoseAuthIssue();
